syntax = "proto3";

package isekai_journey.journey_log;

option php_namespace = "Generated\\IsekaiJourney\\JourneyLog";
option php_metadata_namespace = "Generated\\GPBMetadata";

service JourneyLogService {
  rpc ListJourneyLogs(ListJourneyLogsRequest) returns (ListJourneyLogsResponse);

  rpc CreateJourneyLog(CreateJourneyLogRequest) returns (CreateJourneyLogResponse);

  rpc EditJourneyLog(EditJourneyLogRequest) returns (EditJourneyLogResponse);

  rpc GetJourneyLog(GetJourneyLogRequest) returns (GetJourneyLogResponse);
}

message Date {
  int32 year = 1;
  uint32 month = 2;
  uint32 day = 3;
}

message JourneyLog {
  string journey_log_id = 1;
  string summary = 2;
  string story = 3;
  Date from_on = 4;
  Date to_on = 5;
  int32 order_no = 6;
}

message ListJourneyLogsRequest {
}

message ListJourneyLogsResponse {
  Status status = 1;
  // status が FAILED のときのみ存在する
  optional string message = 2;
  // status にかかわらず配列が返る
  repeated JourneyLog journey_logs = 3;
}

message CreateJourneyLogRequest {
  string summary = 1;
  string story = 2;
  Date from_on = 3;
  Date to_on = 4;
  int32 order_no = 5;
}

message CreateJourneyLogResponse {
  Status status = 1;
  // status が FAILED のときのみ存在する
  optional string message = 2;
  // status が SUCCESS のときのみ存在する
  optional JourneyLog journey_log = 3;
}

message EditJourneyLogRequest {
  string journey_log_id = 1;
  string summary = 2;
  string story = 3;
  Date from_on = 4;
  Date to_on = 5;
  int32 order_no = 6;
}

message EditJourneyLogResponse {
  Status status = 1;
  // status が FAILED のときのみ存在する
  optional string message = 2;
  // status が SUCCESS のときのみ存在する
  optional JourneyLog journey_log = 3;
}

message GetJourneyLogRequest {
  string journey_log_id = 1;
}

message GetJourneyLogResponse {
  Status status = 1;
  // status が FAILED のときのみ存在する
  optional string message = 2;
  // status が SUCCESS のときのみ存在する
  optional JourneyLog journey_log = 3;
}

enum Status {
  SUCCESS = 0;
  FAILED = 1;
}
